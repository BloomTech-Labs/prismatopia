AWSTemplateFormatVersion: "2010-09-09"
Description: A very simple VPC for hosting an application

Parameters:
  CidrBlock:
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlock
  
  LoggingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'vpc-flow-logs.amazonaws.com'
          Action: 'sts:AssumeRole'
        - Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'flowlogs-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: '*'

  FlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14

  FlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt LoggingRole.Arn
      LogGroupName: !Ref FlowLogsLogGroup
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL

  CloudTrailBucket: 
    Type: AWS::S3::Bucket

  CloudTrailBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: 
        Ref: CloudTrailBucket
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Sid: "AWSCloudTrailAclCheck"
            Effect: "Allow"
            Principal: 
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:GetBucketAcl"
            Resource: 
              !Sub arn:aws:s3:::${CloudTrailBucket}
          - 
            Sid: "AWSCloudTrailWrite"
            Effect: "Allow"
            Principal: 
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:PutObject"
            Resource:
              !Sub arn:aws:s3:::${CloudTrailBucket}/AWSLogs/${AWS::AccountId}/*
            Condition: 
              StringEquals:
                s3:x-amz-acl: "bucket-owner-full-control"

  CloudTrailLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      
  CloudTrail: 
    Type: AWS::CloudTrail::Trail
    DependsOn: 
      - CloudTrailBucketPolicy
    Properties: 
      S3BucketName: !Ref CloudTrailBucket
      CloudWatchLogsLogGroupArn: !GetAtt CloudTrailLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt LoggingRole.Arn
      IsLogging: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/28"
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: Public01

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.16/28"
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: Public02
  
  PublicSubnet03:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/26"
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: Public03

  PublicSubnet04:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.64/26"
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: Public04

  PublicSubnetNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
        VpcId: !Ref VPC
  
  PublicSubnetNACLIngressHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNACL
      RuleNumber: 1000
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
  
  PublicSubnetNACLIngressHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNACL
      RuleNumber: 2000
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  PublicSubnetNACLEntryEphemeralWithNAT:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNACL
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  PublicSubnetNACLEntryEgressToVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNACL
      RuleNumber: 1000
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  PublicSubnet01NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      NetworkAclId: !Ref PublicSubnetNACL

  PublicSubnet02NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      NetworkAclId: !Ref PublicSubnetNACL

  PublicSubnet03NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet03
      NetworkAclId: !Ref PublicSubnetNACL

  PublicSubnet04NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet04
      NetworkAclId: !Ref PublicSubnetNACL

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public

  PublicRoute01:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet03
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet04RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet04
      RouteTableId: !Ref PublicRouteTable

  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NATGateway:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId: !GetAtt 'EIP.AllocationId'
      SubnetId: !Ref PublicSubnet01

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private

  PrivateRoute01:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.0.0/28"
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: Private01

  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet03:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.128/26"
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: Private03

  PrivateSubnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet03
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.0.16/28"
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: Private02

  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable
  
  PrivateSubnet04:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.192/26"
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: Private04

  PrivateSubnet04RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet04
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
        VpcId: !Ref VPC
  
  PrivateSubnetNACLEntryIngressFromVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: !GetAtt VPC.CidrBlock
      PortRange:
        From: 0
        To: 65535
  
  PrivateSubnetNACLEntryIngressEphemeralWithNAT:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetNACL
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  
  PrivateSubnetNACLEntryEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetNACL
      RuleNumber: 1000
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  PrivateSubnet01NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      NetworkAclId: !Ref PrivateSubnetNACL

  PrivateSubnet02NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      NetworkAclId: !Ref PrivateSubnetNACL

  PrivateSubnet03NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet03
      NetworkAclId: !Ref PrivateSubnetNACL

  PrivateSubnet04NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet04
      NetworkAclId: !Ref PrivateSubnetNACL

  RDSSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Subnet group for the API database"
      SubnetIds: 
        - !Ref PrivateSubnet01
        - !Ref PrivateSubnet02

  RDSInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow Postgres
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            CidrIp: !GetAtt VPC.CidrBlock

  RDSInstanceSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        SecretStringTemplate: '{"username": "master"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  RDSInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBName: "prisma"
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref RDSInstanceSecurityGroup
      DBInstanceClass: "db.t3.small"
      Engine: "postgres"
      AllocatedStorage: "100"
      DBSubnetGroupName: !Ref RDSSubnetGroup
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSInstanceSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSInstanceSecret, ':SecretString:password}}' ]]
  
  RDSInstanceDev:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBName: "prisma"
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref RDSInstanceSecurityGroup
      DBInstanceClass: "db.t3.small"
      Engine: "postgres"
      AllocatedStorage: "100"
      DBSubnetGroupName: !Ref RDSSubnetGroup
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSInstanceSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSInstanceSecret, ':SecretString:password}}' ]]

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action:
            - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'logs:*'
                - 'ecr:*'
              Resource: '*'

  PrismaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14

  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the Mission Control API ELB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
      SecurityGroups:
        - !Ref PublicLoadBalancerSG

  PublicLoadBalancerDev:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
      SecurityGroups:
        - !Ref PublicLoadBalancerSG
      Tags:
        - Key: Environment
          Value: Dev
  
  PrismaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ['-', [!Ref 'AWS::StackName', 'prisma']]
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /status
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'
      TargetType: 'ip'

  PrismaTargetGroupDev:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ['-', [!Ref 'AWS::StackName', 'prismadev']]
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /status
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'
      TargetType: 'ip'

  PublicLoadBalancerListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Protocol: HTTP
      Port: 80

  PublicLoadBalancerListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: 'arn:aws:acm:us-east-1:576275871595:certificate/44c2ccb9-2333-43f8-8ad6-07a191c8ecfe'
      DefaultActions:
        - TargetGroupArn: !Ref 'PrismaTargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Protocol: HTTPS
      Port: 443

  PublicLoadBalancerListenerHTTPDev:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref 'PublicLoadBalancerDev'
      Protocol: HTTP
      Port: 80

  PublicLoadBalancerListenerHTTPSDev:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: 'arn:aws:acm:us-east-1:576275871595:certificate/44c2ccb9-2333-43f8-8ad6-07a191c8ecfe'
      DefaultActions:
        - TargetGroupArn: !Ref 'PrismaTargetGroupDev'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancerDev'
      Protocol: HTTPS
      Port: 443

  PrismaTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities: 
        - FARGATE
      Family: prisma
      Cpu: "1024"
      Memory: "2048"
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: prisma-container
          Image: 'prismagraphql/prisma:1.34'
          Essential: true
          PortMappings:
            - ContainerPort: 60000
          Ulimits:
            - Name: nofile
              HardLimit: 1000000
              SoftLimit: 1000000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref PrismaLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: prisma
          Environment:
            - Name: PRISMA_CONFIG
              Value: !Sub |
                  port: 60000
                  managementApiSecret: '{{resolve:secretsmanager:${RDSInstanceSecret}:SecretString:password}}'
                  databases:
                    default:
                      connector: postgres
                      host: ${RDSInstance.Endpoint.Address}
                      port: ${RDSInstance.Endpoint.Port}
                      user: '{{resolve:secretsmanager:${RDSInstanceSecret}:SecretString:username}}'
                      password: '{{resolve:secretsmanager:${RDSInstanceSecret}:SecretString:password}}'
                      migrations: true
            - Name: JAVA_OPTS
              Value: -Xmx1350m

  PrismaTaskDefinitionDev:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities: 
        - FARGATE
      Family: prisma
      Cpu: "1024"
      Memory: "2048"
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: prisma-container
          Image: 'prismagraphql/prisma:1.34'
          Essential: true
          PortMappings:
            - ContainerPort: 60000
          Ulimits:
            - Name: nofile
              HardLimit: 1000000
              SoftLimit: 1000000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref PrismaLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: prisma
          Environment:
            - Name: PRISMA_CONFIG
              Value: !Sub |
                  port: 60000
                  managementApiSecret: '{{resolve:secretsmanager:${RDSInstanceSecret}:SecretString:password}}'
                  databases:
                    default:
                      connector: postgres
                      host: ${RDSInstanceDev.Endpoint.Address}
                      port: ${RDSInstanceDev.Endpoint.Port}
                      user: '{{resolve:secretsmanager:${RDSInstanceSecret}:SecretString:username}}'
                      password: '{{resolve:secretsmanager:${RDSInstanceSecret}:SecretString:password}}'
                      migrations: true
            - Name: JAVA_OPTS
              Value: -Xmx1350m

  ECSCluster:
    Type: AWS::ECS::Cluster

  PrismaServiceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the Mission Control API ELB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !GetAtt VPC.CidrBlock
          IpProtocol: "tcp"
          FromPort: 60000
          ToPort: 60000

  PrismaService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: Prisma
      LaunchType: FARGATE
      TaskDefinition: !Ref 'PrismaTaskDefinition'
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LoadBalancers: 
        - ContainerName: prisma-container
          ContainerPort: 60000
          TargetGroupArn: !Ref PrismaTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet01
            - !Ref PrivateSubnet02
          SecurityGroups:
            - !Ref PrismaServiceSG
  
  PrismaServiceDev:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: PrismaDev
      LaunchType: FARGATE
      TaskDefinition: !Ref 'PrismaTaskDefinitionDev'
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LoadBalancers: 
        - ContainerName: prisma-container
          ContainerPort: 60000
          TargetGroupArn: !Ref PrismaTargetGroupDev
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet01
            - !Ref PrivateSubnet02
          SecurityGroups:
            - !Ref PrismaServiceSG

Outputs:
  VPC:
    Description: The ID of the VPC
    Value: !Ref VPC
    Export:
      Name: VPC
  VPCCIDR:
    Description: The CIDR block for the VPC
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: VPCCIDR
  PublicSubnet01:
    Description: ID for public subnet 01
    Value: !Ref PublicSubnet01
    Export:
      Name: PublicSubnet01
  PublicSubnet02:
    Description: ID for public subnet 02
    Value: !Ref PublicSubnet02
    Export:
      Name: PublicSubnet02
  PublicSubnet03:
    Description: ID for public subnet 03
    Value: !Ref PublicSubnet03
    Export:
      Name: PublicSubnet03
  PublicSubnet04:
    Description: ID for public subnet 04
    Value: !Ref PublicSubnet04
    Export:
      Name: PublicSubnet04
  PrivateSubnet01:
    Description: ID for private subnet 01
    Value: !Ref PrivateSubnet01
    Export:
      Name: PrivateSubnet01
  PrivateSubnet02:
    Description: ID for private subnet 02
    Value: !Ref PrivateSubnet02
    Export:
      Name: PrivateSubnet02
  PrivateSubnet03:
    Description: ID for private subnet 03
    Value: !Ref PrivateSubnet03
    Export:
      Name: PrivateSubnet03
  PrivateSubnet04:
    Description: ID for private subnet 04
    Value: !Ref PrivateSubnet04
    Export:
      Name: PrivateSubnet04